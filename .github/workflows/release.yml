# .github/workflows/release.yml

name: Release and Publish Docker Image

# This workflow runs when a new tag starting with 'v' (e.g., v1.0.0) is pushed.
on:
  push:
    branches:
    - main

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
    - uses: google-github-actions/release-please-action@v4
      with:
        release-type: go
        package-name: prism-auth-service

  # JOB YANG ADA DULU: di-trigger saat release-please berhasil
  release-and-publish:
    name: Release and Publish
    needs: release-please
    # Jalankan job ini hanya jika release-please membuat rilis baru
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    # Set permissions for the GITHUB_TOKEN to allow pushing to GHCR and creating releases.
    permissions:
      contents: write # To create the GitHub Release
      packages: write # To push images to GitHub Container Registry

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        # This will generate tags like:
        # - ghcr.io/lumina-enterprise-solutions/prism-auth-service:latest (for the newest tag)
        # - ghcr.io/lumina-enterprise-solutions/prism-auth-service:1.2.3 (from tag v1.2.3)
        # - ghcr.io/lumina-enterprise-solutions/prism-auth-service:1.2   (from tag v1.2.3)
        # - ghcr.io/lumina-enterprise-solutions/prism-auth-service:1     (from tag v1.2.3)

        # Set up QEMU for multi-platform builds (good practice)
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    # Set up Docker Buildx for advanced build features
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: . # Build context is the root of the service directory
        file: ./Dockerfile
        push: true # Actually push the image
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,mode=max
